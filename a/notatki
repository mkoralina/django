class Equipment(models.Model):
    #equipment_id = models.AutoField(primary_key=True)
    serial_number = models.IntegerField(max_length=8, primary_key=True)
    #serial_number = models.IntegerField(max_length=8, null=True)
    name = models.CharField(max_length=20, null=True)
    #objects = InheritanceManager()



                <form action="{% url 'make_reservation' room.id term.id %}" method="post">
                {% csrf_token %}




            try:
                if hours:
                    start = hours[0]
                    end = hours[0] + 1
                    for i in range (1, hours.__len__()):
                        if hours[i] == hours[i-1] + 1:
                            end = hours[i] + 1
                        else:


                            begin_time = datetime.strptime(start, "%H:%M").time()
                            end_time = datetime.strptime(end, "%H:%M").time()

                            #try:
                            term = Term.objects.select_for_update().get(begin_time__lte=begin_time, end_time__gte=end_time)
                            room = Room.objects.select_for_update().get(id=room_id)
                            #except(Term.DoesNotExist, Room.DoesNotExist):
                            #    return render(request, 'a/make_reservation.html',
                            #          {'error_message': 'We are sorry, the term you wanted to '
                            #                            'reserve is no longer available.'})

                            r = Reservation()

                            term = r.prepare_term(begin_time, end_time, term, room)
                            r.reserve(room, term, request.user)


                            start = hours[i]
                            end = hours[i] + 1

                    # uwaga! copy paste ! -> dac funcje
                    begin_time = datetime.strptime(start, "%H:%M").time()
                    end_time = datetime.strptime(end, "%H:%M").time()

                    #try:
                    term = Term.objects.select_for_update().get(begin_time__lte=begin_time, end_time__gte=end_time)
                    room = Room.objects.select_for_update().get(id=room_id)
                    #except(Term.DoesNotExist, Room.DoesNotExist):
                    #    return render(request, 'a/make_reservation.html',
                    #          {'error_message': 'We are sorry, the term you wanted to '
                    #                            'reserve is no longer available.'})

                    r = Reservation()

                    term = r.prepare_term(begin_time, end_time, term, room)
                    r.reserve(room, term, request.user)


            except:
                #return redirect('a:list')
                raise StandardError("Impossible to reserve. Terms unavailable.")





            # uwaga! copy paste ! -> dac funcje
            begin_time = datetime.strptime(str(start), "%H").time()
            end_time = datetime.strptime(str(end), "%H").time()

            #try:
            term = Term.objects.select_for_update().get(begin_time__lte=begin_time, end_time__gte=end_time)
            room = Room.objects.select_for_update().get(id=room_id)
            #except(Term.DoesNotExist, Room.DoesNotExist):
            #    return render(request, 'a/make_reservation.html',
            #          {'error_message': 'We are sorry, the term you wanted to '
            #                            'reserve is no longer available.'})

            r = Reservation()

            term = r.prepare_term(begin_time, end_time, term, room)
            r.reserve(room, term, request.user)
        else:
            Room.objects.create(name="ELSE", capacity=40,
                    description='Chemistry labolatory')

#        except:
#
   raise StandardError("Impossible to reserve. Terms unavailable.")



    <! -- action="{% url 'a:make_reservation' room.id %}" -->




    <form id="main_form" action="{% url 'a:make_reservation' room.id %}" method="post" name="{{room.id}}">
        {% csrf_token %}



    </form>





    {% load staticfiles %}
    <link href="{% static 'bootstrap/css/bootstrap.min.css' %}" rel="stylesheet" media="screen">
    <style type="text/css">
        <!-- -->
    </style>

    {% load staticfiles %}
    <script src="{% static 'bootstrap/js/bootstrap.min.js' %}"></script>
    {% load staticfiles %}
    <script src="{% static 'jquery.min.js' %}"></script>

    do orzedefiniowania save: (żeby zbijał w jeden blok)


            terms_id = []
        for t in room.terms.all():
            terms_id.append(t.id)
        try:
            before_term = Term.objects.get(end_time=term.begin_time, id__in=terms_id)
            after_term = Term.objects.get(begin_time=term.end_time, id__in=terms_id)

            reservation = Reservation.objects.get(term.begin_time=term.end_time,
                                                                  end_time__gte=end_time, date=date, id__in=terms_id)
        except: